{"version":3,"sources":["components/NewForm.module.css","components/NewForm.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","initialValues","myRequired","myOptional","subForm","subRequired","subOptional","accept","NewForm","React","useState","formState","setFormState","form","useControlledForm","values","onChange","value","createFormItem","required","adaptor","e","target","props","errorText","className","styles","row","htmlFor","name","inputContainer","id","error","SubForm","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"+FACAA,EAAOC,QAAU,CAAC,UAAY,2BAA2B,IAAM,qBAAqB,eAAiB,gCAAgC,QAAU,yBAAyB,MAAQ,yB,wKCY1KC,EAA4B,CAChCC,WAAY,GACZC,WAAY,GACZC,QAAS,CACPC,YAAa,GACbC,YAAa,IAEfC,QAAQ,GAMGC,EAAoB,WAAO,IAAD,EACHC,IAAMC,SAAST,GADZ,mBAC9BU,EAD8B,KACnBC,EADmB,KAE/BC,EAAOC,4BAAkB,CAC7BC,OAAQJ,EACRK,SAAU,SAACC,GAAD,OACRL,EAAa,eAAKD,EAAN,GAAoBM,OAEpC,OACE,iCACE,6BACGJ,EAAKK,eAAe,aAAc,CACjCC,UAAU,EACVC,QAAS,SAACC,GAAD,OAA4CA,EAAEC,OAAOL,QAF/DJ,EAGE,gBAAGU,EAAH,EAAGA,MAAOC,EAAV,EAAUA,UAAV,OACD,yBAAKC,UAAWC,IAAOC,KACrB,2BAAOC,QAASL,EAAMM,MAAtB,gBACA,yBAAKJ,UAAWC,IAAOI,gBACrB,yCAAOC,GAAIR,EAAMM,MAAUN,IAC3B,yBAAKE,UAAWC,IAAOM,OAAQR,EAA/B,aAILX,EAAKK,eAAe,aAAc,CACjCE,QAAS,SAACC,GAAD,OAA4CA,EAAEC,OAAOL,QAD/DJ,EAEE,gBAAGU,EAAH,EAAGA,MAAOC,EAAV,EAAUA,UAAV,OACD,yBAAKC,UAAWC,IAAOC,KACrB,2BAAOC,QAASL,EAAMM,MAAtB,eACA,yBAAKJ,UAAWC,IAAOI,gBACrB,yCAAOC,GAAIR,EAAMM,MAAUN,IAC3B,yBAAKE,UAAWC,IAAOM,OAAQR,EAA/B,aAKN,uCACA,kBAAC,EAAD,CACET,OAAQJ,EAAUP,QAClBY,SAAU,SAACZ,GAAD,OAAaQ,EAAa,eAAKD,EAAN,CAAiBP,mBAUxD6B,EAAkC,SAAC,GAA0B,IAAxBlB,EAAuB,EAAvBA,OAAQC,EAAe,EAAfA,SAC3CH,EAAOC,4BAAkB,CAC7BC,SACAC,SAAU,SAACC,GAAD,OAAWD,EAAS,eAAKD,EAAN,GAAiBE,OAEhD,OACE,iCACE,6BACGJ,EAAKK,eAAe,cAAe,CAClCC,UAAU,EACVC,QAAS,SAACC,GAAD,OAA4CA,EAAEC,OAAOL,QAF/DJ,EAGE,gBAAGU,EAAH,EAAGA,MAAOC,EAAV,EAAUA,UAAV,OACD,yBAAKC,UAAWC,IAAOC,KACrB,2BAAOC,QAASL,EAAMM,MAAtB,gBACA,yBAAKJ,UAAWC,IAAOI,gBACrB,yCAAOC,GAAIR,EAAMM,MAAUN,IAC3B,yBAAKE,UAAWC,IAAOM,OAAQR,EAA/B,aAILX,EAAKK,eAAe,cAAe,CAClCE,QAAS,SAACC,GAAD,OAA4CA,EAAEC,OAAOL,QAD/DJ,EAEE,gBAAGU,EAAH,EAAGA,MAAOC,EAAV,EAAUA,UAAV,OACD,yBAAKC,UAAWC,IAAOC,KACrB,2BAAOC,QAASL,EAAMM,MAAtB,eACA,yBAAKJ,UAAWC,IAAOI,gBACrB,yCAAOC,GAAIR,EAAMM,MAAUN,IAC3B,yBAAKE,UAAWC,IAAOM,OAAQR,EAA/B,gBChGP,SAASU,IACd,OACE,yBAAKT,UAAU,OACb,0DACA,kBAAC,EAAD,OCIcU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAnB,GACLoB,QAAQpB,MAAMA,EAAMqB,a","file":"static/js/main.142ac586.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"BasicForm\":\"NewForm_BasicForm__SLRy2\",\"row\":\"NewForm_row__3vyFK\",\"inputContainer\":\"NewForm_inputContainer__1_V_7\",\"flexRow\":\"NewForm_flexRow__sx-HI\",\"error\":\"NewForm_error__2175Z\"};","import React from \"react\";\nimport { useControlledForm } from \"use-form-ts\";\nimport styles from \"./NewForm.module.css\";\n\ntype MyFormResp = {\n  myRequired: string;\n  myOptional: string;\n  subForm: {\n    subRequired: string;\n    subOptional: string;\n  };\n  accept: boolean;\n};\nconst initialValues: MyFormResp = {\n  myRequired: \"\",\n  myOptional: \"\",\n  subForm: {\n    subRequired: \"\",\n    subOptional: \"\",\n  },\n  accept: false,\n};\n/**\n * Cases: Required (localvalidation), optional, async validation\n * local state, global state\n */\nexport const NewForm: React.FC = () => {\n  const [formState, setFormState] = React.useState(initialValues);\n  const form = useControlledForm({\n    values: formState,\n    onChange: (value: Partial<MyFormResp>) =>\n      setFormState({ ...formState, ...value }),\n  });\n  return (\n    <section>\n      <div>\n        {form.createFormItem(\"myRequired\", {\n          required: true,\n          adaptor: (e: React.ChangeEvent<HTMLInputElement>) => e.target.value,\n        })(({ props, errorText }) => (\n          <div className={styles.row}>\n            <label htmlFor={props.name}>My Required*</label>\n            <div className={styles.inputContainer}>\n              <input id={props.name} {...props} />\n              <div className={styles.error}>{errorText}&nbsp;</div>\n            </div>\n          </div>\n        ))}\n        {form.createFormItem(\"myOptional\", {\n          adaptor: (e: React.ChangeEvent<HTMLInputElement>) => e.target.value,\n        })(({ props, errorText }) => (\n          <div className={styles.row}>\n            <label htmlFor={props.name}>My Optional</label>\n            <div className={styles.inputContainer}>\n              <input id={props.name} {...props} />\n              <div className={styles.error}>{errorText}&nbsp;</div>\n            </div>\n          </div>\n        ))}\n\n        <h3>SubForm</h3>\n        <SubForm\n          values={formState.subForm}\n          onChange={(subForm) => setFormState({ ...formState, subForm })}\n        />\n      </div>\n    </section>\n  );\n};\ntype SubFormProps = {\n  values: MyFormResp[\"subForm\"];\n  onChange: (value: MyFormResp[\"subForm\"]) => void;\n};\nconst SubForm: React.FC<SubFormProps> = ({ values, onChange }) => {\n  const form = useControlledForm({\n    values,\n    onChange: (value) => onChange({ ...values, ...value }),\n  });\n  return (\n    <section>\n      <div>\n        {form.createFormItem(\"subRequired\", {\n          required: true,\n          adaptor: (e: React.ChangeEvent<HTMLInputElement>) => e.target.value,\n        })(({ props, errorText }) => (\n          <div className={styles.row}>\n            <label htmlFor={props.name}>My Required*</label>\n            <div className={styles.inputContainer}>\n              <input id={props.name} {...props} />\n              <div className={styles.error}>{errorText}&nbsp;</div>\n            </div>\n          </div>\n        ))}\n        {form.createFormItem(\"subOptional\", {\n          adaptor: (e: React.ChangeEvent<HTMLInputElement>) => e.target.value,\n        })(({ props, errorText }) => (\n          <div className={styles.row}>\n            <label htmlFor={props.name}>My Optional</label>\n            <div className={styles.inputContainer}>\n              <input id={props.name} {...props} />\n              <div className={styles.error}>{errorText}&nbsp;</div>\n            </div>\n          </div>\n        ))}\n      </div>\n    </section>\n  );\n};\n","import React from \"react\";\nimport \"./App.css\";\nimport { NewForm } from \"./components/NewForm\";\n\nexport function App() {\n  return (\n    <div className=\"App\">\n      <header>This is our basic form</header>\n      <NewForm />\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { App } from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}