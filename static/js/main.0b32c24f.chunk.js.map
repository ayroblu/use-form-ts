{"version":3,"sources":["components/forms/ExampleForm.module.css","components/forms/ExampleForm.tsx","components/home/Home.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","ExampleForm","React","useState","form","firstname","lastname","log","state","setState","useForm","values","onChange","value","onSubmit","e","preventDefault","validate","concat","JSON","stringify","createFormItem","required","adaptor","target","props","name","errorText","label","className","styles","submit","type","map","v","i","key","InputField","inputProps","input","inputLabel","id","error","Home","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"+FACAA,EAAOC,QAAU,CAAC,MAAQ,2BAA2B,WAAa,gCAAgC,MAAQ,2BAA2B,OAAS,8B,+KCGjIC,EAAc,WAAO,IAAD,EACLC,IAAMC,SAAS,CACvCC,KAAM,CAAEC,UAAW,GAAIC,SAAU,IACjCC,IAAK,KAHwB,mBACxBC,EADwB,KACjBC,EADiB,KAKzBL,EAAOM,kBAAQ,CACnBC,OAAQH,EAAMJ,KACdQ,SAAU,SAACC,GAAD,OACRJ,EAAS,eAAKD,EAAN,CAAaJ,KAAK,eAAMI,EAAMJ,KAAb,GAAsBS,SAWnD,OACE,0BAAMC,SAVa,SAACC,GACpBA,EAAEC,iBACEZ,EAAKa,YACPR,EAAS,eACJD,EADG,CAEND,IAAKC,EAAMD,IAAIW,OAAV,kBAA4BC,KAAKC,UAAUZ,EAAMJ,aAMxD,4CACCA,EAAKiB,eAAe,YAAa,CAChCC,UAAU,EACVC,QAAS,SAACR,GAAD,OAA4CA,EAAES,OAAOX,QAF/DT,EAGE,oBAAGqB,MAASZ,EAAZ,EAAYA,MAAOD,EAAnB,EAAmBA,SAAUc,EAA7B,EAA6BA,KAAQC,EAArC,EAAqCA,UAArC,OACD,kBAAC,EAAD,CACEC,MAAM,aACNf,MAAOA,EACPD,SAAUA,EACVc,KAAMA,EACNC,UAAWA,GAAa,QAG3BvB,EAAKiB,eAAe,WAAY,CAC/BC,UAAU,EACVC,QAAS,SAACR,GAAD,OAA4CA,EAAES,OAAOX,QAF/DT,EAGE,oBAAGqB,MAASZ,EAAZ,EAAYA,MAAOD,EAAnB,EAAmBA,SAAUc,EAA7B,EAA6BA,KAAQC,EAArC,EAAqCA,UAArC,OACD,kBAAC,EAAD,CACEC,MAAM,YACNf,MAAOA,EACPD,SAAUA,EACVc,KAAMA,EACNC,UAAWA,GAAa,QAG5B,2BAAOE,UAAWC,IAAOC,OAAQC,KAAK,SAASnB,MAAM,WACrD,iCACGL,EAAMD,IAAI0B,KAAI,SAACC,EAAGC,GAAJ,OACb,uBAAGC,IAAKD,GAAID,SAchBG,EAAwC,SAAC,GAKxC,IAJLX,EAII,EAJJA,KACAE,EAGI,EAHJA,MACAD,EAEI,EAFJA,UACGW,EACC,4CACJ,OACE,2BAAOT,UAAWC,IAAOS,OACvB,0BAAMV,UAAWC,IAAOU,YAAaZ,GACrC,yCAAOa,GAAIf,GAAUY,IACrB,yBAAKT,UAAWC,IAAOY,OAAQf,KC1ExBgB,EAAiB,WAC5B,OACE,iCACE,gCACE,2CACA,iGAEF,iCACE,0CACA,iIAKF,6CACA,kBAAC,EAAD,QCdC,SAASC,IACd,OACE,yBAAKf,UAAU,OACb,kBAAC,EAAD,OCKcgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAnB,GACLoB,QAAQpB,MAAMA,EAAMqB,a","file":"static/js/main.0b32c24f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"ExampleForm_input__1I4Jb\",\"inputLabel\":\"ExampleForm_inputLabel__2gPgw\",\"error\":\"ExampleForm_error__k0GOK\",\"submit\":\"ExampleForm_submit__3u5ML\"};","import React from \"react\";\nimport styles from \"./ExampleForm.module.css\";\nimport { useForm } from \"use-form-ts\";\n\nexport const ExampleForm = () => {\n  const [state, setState] = React.useState({\n    form: { firstname: \"\", lastname: \"\" },\n    log: [] as string[],\n  });\n  const form = useForm({\n    values: state.form,\n    onChange: (value) =>\n      setState({ ...state, form: { ...state.form, ...value } }),\n  });\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    if (form.validate()) {\n      setState({\n        ...state,\n        log: state.log.concat(`Result: ${JSON.stringify(state.form)}`),\n      });\n    }\n  };\n  return (\n    <form onSubmit={handleSubmit}>\n      <h3>Example Form</h3>\n      {form.createFormItem(\"firstname\", {\n        required: true,\n        adaptor: (e: React.ChangeEvent<HTMLInputElement>) => e.target.value,\n      })(({ props: { value, onChange, name }, errorText }) => (\n        <InputField\n          label=\"First Name\"\n          value={value}\n          onChange={onChange}\n          name={name}\n          errorText={errorText || \"\"}\n        />\n      ))}\n      {form.createFormItem(\"lastname\", {\n        required: true,\n        adaptor: (e: React.ChangeEvent<HTMLInputElement>) => e.target.value,\n      })(({ props: { value, onChange, name }, errorText }) => (\n        <InputField\n          label=\"Last Name\"\n          value={value}\n          onChange={onChange}\n          name={name}\n          errorText={errorText || \"\"}\n        />\n      ))}\n      <input className={styles.submit} type=\"submit\" value=\"Submit\" />\n      <section>\n        {state.log.map((v, i) => (\n          <p key={i}>{v}</p>\n        ))}\n      </section>\n    </form>\n  );\n};\n\ntype InputFieldProps = {\n  name: string;\n  label: string;\n  value: string;\n  onChange: React.ChangeEventHandler<HTMLInputElement>;\n  errorText: string;\n};\nconst InputField: React.FC<InputFieldProps> = ({\n  name,\n  label,\n  errorText,\n  ...inputProps\n}) => {\n  return (\n    <label className={styles.input}>\n      <span className={styles.inputLabel}>{label}</span>\n      <input id={name} {...inputProps} />\n      <div className={styles.error}>{errorText}</div>\n    </label>\n  );\n};\n","import React from \"react\";\nimport { ExampleForm } from \"../forms/ExampleForm\";\n\nexport const Home: React.FC = () => {\n  return (\n    <section>\n      <header>\n        <h1>use-form-ts</h1>\n        <p>lightweight useForm hook for creating basic forms with TypeScript</p>\n      </header>\n      <section>\n        <h2>useForm.ts</h2>\n        <p>\n          Forms should be straight forward, just useForm and form.createFormItem\n          to pass form state around.\n        </p>\n      </section>\n      <section>Example:</section>\n      <ExampleForm />\n    </section>\n  );\n};\n","import React from \"react\";\nimport \"./App.css\";\nimport { Home } from \"./home/Home\";\n\nexport function App() {\n  return (\n    <div className=\"App\">\n      <Home />\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { App } from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}