{"version":3,"sources":["components/shared/Button.module.css","serviceWorker.ts","components/forms/ExampleForm.tsx","components/forms/ExampleForm.txt.ts","components/shared/Button.tsx","utils.ts","components/shared/ExampleFrame.tsx","components/home/Home.tsx","components/App.tsx","index.tsx","components/home/Home.module.css","components/forms/ExampleForm.module.css","components/shared/ExampleFrame.module.css"],"names":["module","exports","Boolean","window","location","hostname","match","ExampleForm","React","useState","form","firstname","lastname","log","state","setState","useForm","values","onChange","value","onSubmit","e","preventDefault","validate","concat","JSON","stringify","className","styles","createFormItem","required","adaptor","target","meta","label","errorText","props","submit","type","map","v","i","InputField","name","inputProps","input","inputLabel","id","error","exampleForm","trim","Button","onClick","children","button","cn","args","filter","isString","join","a","ExampleFrame","sourceCode","headerText","isShowSource","setIsShowSource","exampleFrame","header","code","show","hidden","language","style","solarizedlight","Home","home","title","terminal","highlight","href","rel","App","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.b4da812f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__3uWv_\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin)\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker === null || installingWorker === undefined) return;\n\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\")\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) config.onUpdate(registration);\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) config.onSuccess(registration);\n            }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType !== null &&\n          contentType !== undefined &&\n          contentType.indexOf(\"javascript\") === -1)\n      )\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      // Service worker found. Proceed as normal.\n      else registerValidSW(swUrl, config);\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator)\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n}\n","import React from \"react\";\nimport { useForm } from \"use-form-ts\";\n\nimport styles from \"./ExampleForm.module.css\";\n\nexport const ExampleForm = () => {\n  const [state, setState] = React.useState({\n    form: { firstname: \"\", lastname: \"\" },\n    log: [] as string[],\n  });\n  const form = useForm({\n    values: state.form,\n    onChange: (value) =>\n      setState({ ...state, form: { ...state.form, ...value } }),\n  });\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    if (form.validate())\n      setState({\n        ...state,\n        log: state.log.concat(`Result: ${JSON.stringify(state.form)}`),\n      });\n  };\n  return (\n    <form onSubmit={handleSubmit} className={styles.form}>\n      {form.createFormItem(\"firstname\", {\n        required: true,\n        adaptor: (e: React.ChangeEvent<HTMLInputElement>) => e.target.value,\n        meta: {\n          label: \"First Name\",\n        },\n      })(({ errorText, meta: { label }, ...props }) => (\n        <InputField label={label} {...props} errorText={errorText || \"\"} />\n      ))}\n      {form.createFormItem(\"lastname\", {\n        required: true,\n        adaptor: (e: React.ChangeEvent<HTMLInputElement>) => e.target.value,\n        meta: {\n          label: \"Last Name\",\n        },\n      })(({ errorText, meta: { label }, ...props }) => (\n        <InputField label={label} {...props} errorText={errorText || \"\"} />\n      ))}\n      <input className={styles.submit} type=\"submit\" value=\"Submit\" />\n      <section>\n        {state.log.map((v, i) => (\n          <p key={i}>{v}</p>\n        ))}\n      </section>\n    </form>\n  );\n};\n\ntype InputFieldProps = {\n  name: string;\n  label: string;\n  value: string;\n  onChange: React.ChangeEventHandler<HTMLInputElement>;\n  errorText: string;\n};\nconst InputField: React.FC<InputFieldProps> = ({\n  name,\n  label,\n  errorText,\n  ...inputProps\n}) => (\n  <label className={styles.input}>\n    <span className={styles.inputLabel}>{label}</span>\n    <input id={name} {...inputProps} />\n    <div className={styles.error}>{errorText}</div>\n  </label>\n);\n","export const exampleForm = `\nimport React from \"react\";\nimport { useForm } from \"use-form-ts\";\n\nimport styles from \"./ExampleForm.module.css\";\n\nexport const ExampleForm = () => {\n  const [state, setState] = React.useState({\n    form: { firstname: \"\", lastname: \"\" },\n    log: [] as string[],\n  });\n  const form = useForm({\n    values: state.form,\n    onChange: (value) =>\n      setState({ ...state, form: { ...state.form, ...value } }),\n  });\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    if (form.validate())\n      setState({\n        ...state,\n        log: state.log.concat(\\`Result: \\${JSON.stringify(state.form)}\\`),\n      });\n  };\n  return (\n    <form onSubmit={handleSubmit}>\n      <h3>Example Form</h3>\n      {form.createFormItem(\"firstname\", {\n        required: true,\n        adaptor: (e: React.ChangeEvent<HTMLInputElement>) => e.target.value,\n        meta: {\n          label: \"First Name\",\n        },\n      })(({ errorText, meta: { label }, ...props }) => (\n        <InputField label={label} {...props} errorText={errorText || \"\"} />\n      ))}\n      {form.createFormItem(\"lastname\", {\n        required: true,\n        adaptor: (e: React.ChangeEvent<HTMLInputElement>) => e.target.value,\n        meta: {\n          label: \"Last Name\",\n        },\n      })(({ errorText, meta: { label }, ...props }) => (\n        <InputField label={label} {...props} errorText={errorText || \"\"} />\n      ))}\n      <input className={styles.submit} type=\"submit\" value=\"Submit\" />\n      <section>\n        {state.log.map((v, i) => (\n          <p key={i}>{v}</p>\n        ))}\n      </section>\n    </form>\n  );\n};\n\ntype InputFieldProps = {\n  name: string;\n  label: string;\n  value: string;\n  onChange: React.ChangeEventHandler<HTMLInputElement>;\n  errorText: string;\n};\nconst InputField: React.FC<InputFieldProps> = ({\n  name,\n  label,\n  errorText,\n  ...inputProps\n}) => (\n  <label className={styles.input}>\n    <span className={styles.inputLabel}>{label}</span>\n    <input id={name} {...inputProps} />\n    <div className={styles.error}>{errorText}</div>\n  </label>\n);\n`.trim();\n","import React from \"react\";\n\nimport styles from \"./Button.module.css\";\n\ntype Props = {\n  onClick: () => void;\n};\nexport const Button: React.FC<Props> = ({ onClick, children }) => (\n  <button className={styles.button} onClick={onClick}>\n    {children}\n  </button>\n);\ntype LinkButtonProps = {\n  link: string;\n  isNewTab?: boolean;\n};\nexport const LinkButton: React.FC<LinkButtonProps> = ({\n  children,\n  link,\n  isNewTab,\n}) => (\n  <a\n    href={link}\n    className={styles.button}\n    rel=\"noopener noreferrer\"\n    target={isNewTab ? \"_blank\" : \"_self\"}\n  >\n    {children}\n  </a>\n);\n","/**\n * Fix typing for Object.keys\n */\nexport function ObjectKeys<T extends {}>(o: T): (keyof T)[] {\n  return Object.keys(o) as any;\n}\n\nexport function checkUnreachable(_x: never) {}\n\nexport function cn(\n  ...args: (string | undefined | null | 0 | false | \"\")[]\n): string {\n  return args.filter(isString).join(\" \");\n}\nfunction isString(a: any): a is string {\n  return typeof a === \"string\";\n}\n","import React from \"react\";\nimport { Prism as SyntaxHighlighter } from \"react-syntax-highlighter\";\nimport { solarizedlight } from \"react-syntax-highlighter/dist/esm/styles/prism\";\n\n\nimport { Button } from \"./Button\";\nimport styles from \"./ExampleFrame.module.css\";\n\nimport { cn } from \"../../utils\";\n\ntype Props = {\n  sourceCode: string;\n  headerText: string;\n};\nexport const ExampleFrame: React.FC<Props> = ({\n  children,\n  sourceCode,\n  headerText,\n}) => {\n  const [isShowSource, setIsShowSource] = React.useState(false);\n  return (\n    <section className={styles.exampleFrame}>\n      <header className={styles.header}>\n        <h4>{headerText}</h4>\n        <Button onClick={() => setIsShowSource(!isShowSource)}>\n          {isShowSource ? \"Hide Source\" : \"Show Source\"}\n        </Button>\n      </header>\n      <section>{children}</section>\n      <section\n        className={cn(styles.code, isShowSource ? styles.show : styles.hidden)}\n      >\n        <SyntaxHighlighter language=\"tsx\" style={solarizedlight}>\n          {sourceCode}\n        </SyntaxHighlighter>\n      </section>\n    </section>\n  );\n};\n","import React from \"react\";\n\nimport styles from \"./Home.module.css\";\n\nimport { ExampleForm } from \"../forms/ExampleForm\";\nimport { exampleForm } from \"../forms/ExampleForm.txt\";\nimport { ExampleFrame } from \"../shared/ExampleFrame\";\n\nexport const Home: React.FC = () => (\n  <section className={styles.home}>\n    <header className={styles.header}>\n      <h1 className={styles.title}>useForm</h1>\n      <p>Lightweight useForm hook for creating basic forms with TypeScript</p>\n      <p className={styles.terminal}>\n        <pre>\n          yarn add <span className={styles.highlight}>use-form-ts</span>\n        </pre>\n      </p>\n      <p className={styles.terminal}>\n        <pre>\n          npm install --save{\" \"}\n          <span className={styles.highlight}>use-form-ts</span>\n        </pre>\n      </p>\n      <p>\n        Checkout{\" \"}\n        <a\n          href=\"https://github.com/ayroblu/use-form-ts\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          GitHub\n        </a>{\" \"}\n        for more details\n      </p>\n    </header>\n    <section>\n      <h2>useForm hook</h2>\n      <p>\n        The goal was to keep things simple, there are 3 things to worry about\n      </p>\n      <ul>\n        <li>Values</li>\n        <li>How they change</li>\n        <li>Validation</li>\n      </ul>\n    </section>\n    <section>\n      <ExampleFrame sourceCode={exampleForm} headerText=\"Example\">\n        <ExampleForm />\n      </ExampleFrame>\n    </section>\n  </section>\n);\n","import React from \"react\";\n\nimport \"./App.css\";\nimport { Home } from \"./home/Home\";\n\nexport function App() {\n  return (\n    <div className=\"App\">\n      <Home />\n    </div>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport { App } from \"./components/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"home\":\"Home_home__3yqds\",\"header\":\"Home_header__3sodV\",\"highlight\":\"Home_highlight__ocJSQ\",\"terminal\":\"Home_terminal__2k8CH\",\"title\":\"Home_title__1wLgc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ExampleForm_form__1n1SO\",\"input\":\"ExampleForm_input__1I4Jb\",\"inputLabel\":\"ExampleForm_inputLabel__2gPgw\",\"error\":\"ExampleForm_error__k0GOK\",\"submit\":\"ExampleForm_submit__3u5ML\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"exampleFrame\":\"ExampleFrame_exampleFrame__hCcF7\",\"header\":\"ExampleFrame_header__ZcIPv\",\"hidden\":\"ExampleFrame_hidden__FNuRl\",\"show\":\"ExampleFrame_show__1Spp8\",\"code\":\"ExampleFrame_code__3peGL\"};"],"sourceRoot":""}