{"version":3,"sources":["serviceWorker.ts","components/forms/ExampleForm.tsx","components/forms/KitchenSink.tsx","components/home/Home.tsx","components/App.tsx","index.tsx","components/forms/ExampleForm.module.css"],"names":["Boolean","window","location","hostname","match","ExampleForm","React","useState","form","firstname","lastname","log","state","setState","useForm","values","onChange","value","onSubmit","e","preventDefault","validate","concat","JSON","stringify","createFormItem","required","adaptor","target","meta","label","errorText","props","isLoading","className","styles","submit","type","map","v","i","InputField","name","inputProps","input","inputLabel","id","error","KitchenSink","field","inputAdaptor","validationMessages","custom","val","customAsync","wait","then","validation","time","Promise","y","setTimeout","Home","App","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message","module","exports"],"mappings":"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","file":"static/js/main.83cdf166.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin)\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker === null || installingWorker === undefined) return;\n\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\")\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) config.onUpdate(registration);\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) config.onSuccess(registration);\n            }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType !== null &&\n          contentType !== undefined &&\n          contentType.indexOf(\"javascript\") === -1)\n      )\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      // Service worker found. Proceed as normal.\n      else registerValidSW(swUrl, config);\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator)\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n}\n","import React from \"react\";\nimport { useForm } from \"use-form-ts\";\n\nimport styles from \"./ExampleForm.module.css\";\n\nexport const ExampleForm = () => {\n  const [state, setState] = React.useState({\n    form: { firstname: \"\", lastname: \"\" },\n    log: [] as string[],\n  });\n  const form = useForm({\n    values: state.form,\n    onChange: (value) =>\n      setState({ ...state, form: { ...state.form, ...value } }),\n  });\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    if (form.validate())\n      setState({\n        ...state,\n        log: state.log.concat(`Result: ${JSON.stringify(state.form)}`),\n      });\n  };\n  return (\n    <form onSubmit={handleSubmit}>\n      <h3>Example Form</h3>\n      {form.createFormItem(\"firstname\", {\n        required: true,\n        adaptor: (e: React.ChangeEvent<HTMLInputElement>) => e.target.value,\n        meta: {\n          label: \"First Name\",\n        },\n      })(({ errorText, meta: { label }, isLoading, ...props }) => (\n        <InputField label={label} {...props} errorText={errorText || \"\"} />\n      ))}\n      {form.createFormItem(\"lastname\", {\n        required: true,\n        adaptor: (e: React.ChangeEvent<HTMLInputElement>) => e.target.value,\n        meta: {\n          label: \"Last Name\",\n        },\n      })(({ errorText, meta: { label }, isLoading, ...props }) => (\n        <InputField label={label} {...props} errorText={errorText || \"\"} />\n      ))}\n      <input className={styles.submit} type=\"submit\" value=\"Submit\" />\n      <section>\n        {state.log.map((v, i) => (\n          <p key={i}>{v}</p>\n        ))}\n      </section>\n    </form>\n  );\n};\n\ntype InputFieldProps = {\n  name: string;\n  label: string;\n  value: string;\n  onChange: React.ChangeEventHandler<HTMLInputElement>;\n  errorText: string;\n};\nconst InputField: React.FC<InputFieldProps> = ({\n  name,\n  label,\n  errorText,\n  ...inputProps\n}) => (\n  <label className={styles.input}>\n    <span className={styles.inputLabel}>{label}</span>\n    <input id={name} {...inputProps} />\n    <div className={styles.error}>{errorText}</div>\n  </label>\n);\n","import React from \"react\";\nimport { useForm } from \"use-form-ts\";\n\nexport const KitchenSink = () => {\n  const [state, setState] = React.useState({ field: \"\" });\n  const form = useForm({\n    values: state,\n    onChange: (value) => setState({ ...state, ...value }),\n  });\n  return (\n    <div>\n      {form.createFormItem(\"field\", {\n        adaptor: inputAdaptor,\n        meta: { label: \"Field\" },\n        required: true,\n        validationMessages: {\n          required: ({ meta: { label } }) => `Yo, ${label} is required`,\n        },\n        custom: (val) => (val === \"3\" ? \"3 is not allowed!\" : \"\"),\n        customAsync: (val) =>\n          wait(1000).then(() =>\n            val === \"4\" ? \"Promise 4 is not allowed!\" : null\n          ),\n        validation: {\n          type: \"whitespace\",\n        },\n      })(({ meta: { label }, errorText, isLoading, ...props }) => (\n        <label>\n          <span>{label}</span>\n          <input {...props} />\n          {isLoading ? <span>... loading</span> : null}\n          <span>{errorText}</span>\n        </label>\n      ))}\n    </div>\n  );\n};\nconst inputAdaptor = (e: React.ChangeEvent<HTMLInputElement>) => e.target.value;\nconst wait = (time: number) => new Promise((y) => setTimeout(y, time));\n","import React from \"react\";\n\nimport { ExampleForm } from \"../forms/ExampleForm\";\nimport { KitchenSink } from \"../forms/KitchenSink\";\n\nexport const Home: React.FC = () => (\n  <section>\n    <header>\n      <h1>use-form-ts</h1>\n      <p>lightweight useForm hook for creating basic forms with TypeScript</p>\n    </header>\n    <section>\n      <h2>useForm.ts</h2>\n      <p>\n        Forms should be straight forward, just useForm and form.createFormItem\n        to pass form state around.\n      </p>\n    </section>\n    <section>Example:</section>\n    <ExampleForm />\n    <section>Kitchen Sink:</section>\n    <KitchenSink />\n  </section>\n);\n","import React from \"react\";\n\nimport \"./App.css\";\nimport { Home } from \"./home/Home\";\n\nexport function App() {\n  return (\n    <div className=\"App\">\n      <Home />\n    </div>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport { App } from \"./components/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"ExampleForm_input__1I4Jb\",\"inputLabel\":\"ExampleForm_inputLabel__2gPgw\",\"error\":\"ExampleForm_error__k0GOK\",\"submit\":\"ExampleForm_submit__3u5ML\"};"],"sourceRoot":""}