{"version":3,"sources":["components/home/Home.module.css","components/forms/ExampleForm.module.css","components/shared/ExampleFrame.module.css","serviceWorker.ts","components/forms/InputField.tsx","components/forms/DeclarativeForm.tsx","components/forms/ExampleForm.tsx","components/forms/MaterialForm.tsx","components/shared/Button.tsx","utils.ts","components/shared/ExampleFrame.tsx","components/home/Home.tsx","components/forms/ExampleForm.txt.ts","components/forms/DeclarativeForm.txt.ts","components/forms/MaterialForm.txt.ts","components/App.tsx","index.tsx","components/forms/InputField.module.css","components/shared/Button.module.css","components/forms/MaterialForm.module.css"],"names":["module","exports","Boolean","window","location","hostname","match","InputField","name","label","errorText","inputProps","className","styles","input","inputLabel","id","error","initialState","firstname","middlename","lastname","adaptor","e","target","value","declaredForm","type","options","required","meta","DeclarativeForm","React","useState","formState","setFormState","log","setLog","form","useForm","values","onChange","formItemCreator","createFormItem","props","formItemCreatorFn","onSubmit","preventDefault","validate","concat","JSON","stringify","map","submit","v","i","ExampleForm","MaterialForm","prefersDarkMode","useMediaQuery","theme","useMemo","createMuiTheme","palette","ThemeProvider","TextField","variant","helperText","Button","onClick","children","button","cn","args","filter","isString","join","a","ExampleFrame","sourceCode","headerText","isShowSource","setIsShowSource","exampleFrame","header","code","show","hidden","language","style","solarizedlight","Home","home","title","terminal","highlight","href","rel","footer","App","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.a1514016.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"home\":\"Home_home__3yqds\",\"header\":\"Home_header__3sodV\",\"highlight\":\"Home_highlight__ocJSQ\",\"terminal\":\"Home_terminal__2k8CH\",\"title\":\"Home_title__1wLgc\",\"footer\":\"Home_footer__o01sP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ExampleForm_form__1n1SO\",\"submit\":\"ExampleForm_submit__3u5ML\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"exampleFrame\":\"ExampleFrame_exampleFrame__hCcF7\",\"header\":\"ExampleFrame_header__ZcIPv\",\"hidden\":\"ExampleFrame_hidden__FNuRl\",\"show\":\"ExampleFrame_show__1Spp8\",\"code\":\"ExampleFrame_code__3peGL\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin)\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker === null || installingWorker === undefined) return;\n\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\")\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) config.onUpdate(registration);\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) config.onSuccess(registration);\n            }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType !== null &&\n          contentType !== undefined &&\n          contentType.indexOf(\"javascript\") === -1)\n      )\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      // Service worker found. Proceed as normal.\n      else registerValidSW(swUrl, config);\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator)\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n}\n","import React from \"react\";\n\nimport styles from \"./InputField.module.css\";\n\ntype InputFieldProps = {\n  name: string;\n  label: string;\n  value: string;\n  onChange: React.ChangeEventHandler<HTMLInputElement>;\n  errorText: string;\n};\nexport const InputField: React.FC<InputFieldProps> = ({\n  name,\n  label,\n  errorText,\n  ...inputProps\n}) => (\n  <label className={styles.input}>\n    <span className={styles.inputLabel}>{label}</span>\n    <input id={name} {...inputProps} />\n    <div className={styles.error}>{errorText}</div>\n  </label>\n);\n","import React from \"react\";\nimport { CreateFormItem, useForm } from \"use-form-ts\";\n\nimport styles from \"./ExampleForm.module.css\";\nimport { InputField } from \"./InputField\";\n\ntype FormState = { firstname: string; middlename: string; lastname: string };\ntype FormItem<T extends {}> = {\n  name: keyof T;\n  type: \"text\";\n  options: {\n    required: boolean;\n    adaptor: typeof adaptor;\n    meta: { label: string };\n  };\n};\n\nconst initialState: FormState = {\n  firstname: \"\",\n  middlename: \"\",\n  lastname: \"\",\n};\nconst adaptor = (e: React.ChangeEvent<HTMLInputElement>) => e.target.value;\n\nconst declaredForm: FormItem<FormState>[] = [\n  {\n    name: \"firstname\",\n    type: \"text\",\n    options: {\n      required: true,\n      adaptor,\n      meta: {\n        label: \"First Name\",\n      },\n    },\n  },\n  {\n    name: \"middlename\",\n    type: \"text\",\n    options: {\n      required: false,\n      adaptor,\n      meta: {\n        label: \"Middle Name\",\n      },\n    },\n  },\n  {\n    name: \"lastname\",\n    type: \"text\",\n    options: {\n      required: true,\n      adaptor,\n      meta: {\n        label: \"Last Name\",\n      },\n    },\n  },\n];\n\nconst formItemCreatorFn = (form: {\n  createFormItem: CreateFormItem<FormState>;\n  validate: () => boolean;\n}) => ({ name, type, options }: FormItem<FormState>) => {\n  if (type === \"text\")\n    return form.createFormItem(\n      name,\n      options\n    )(({ errorText, meta: { label }, ...props }) => (\n      <InputField label={label} {...props} errorText={errorText || \"\"} />\n    ));\n\n  return null;\n};\n\nexport const DeclarativeForm = () => {\n  const [formState, setFormState] = React.useState<FormState>(initialState);\n  const [log, setLog] = React.useState<string[]>([]);\n\n  const form = useForm({\n    values: formState,\n    onChange: (value) => setFormState({ ...formState, ...value }),\n  });\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    if (form.validate())\n      setLog(log.concat(`Result: ${JSON.stringify(formState)}`));\n  };\n  const formItemCreator = formItemCreatorFn(form);\n\n  return (\n    <form onSubmit={handleSubmit} className={styles.form}>\n      {declaredForm.map(formItemCreator)}\n      <input className={styles.submit} type=\"submit\" value=\"Submit\" />\n      <section>\n        {log.map((v, i) => (\n          <p key={i}>{v}</p>\n        ))}\n      </section>\n    </form>\n  );\n};\n","import React from \"react\";\nimport { useForm } from \"use-form-ts\";\n\nimport styles from \"./ExampleForm.module.css\";\nimport { InputField } from \"./InputField\";\n\nexport const ExampleForm = () => {\n  const [formState, setFormState] = React.useState({\n    firstname: \"\",\n    lastname: \"\",\n  });\n  const [log, setLog] = React.useState<string[]>([]);\n\n  const form = useForm({\n    values: formState,\n    onChange: (value) => setFormState({ ...formState, ...value }),\n  });\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    if (form.validate())\n      setLog(log.concat(`Result: ${JSON.stringify(formState)}`));\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className={styles.form}>\n      {form.createFormItem(\"firstname\", {\n        required: true,\n        adaptor: (e: React.ChangeEvent<HTMLInputElement>) => e.target.value,\n        meta: {\n          label: \"First Name\",\n        },\n      })(({ errorText, meta: { label }, ...props }) => (\n        <InputField label={label} {...props} errorText={errorText || \"\"} />\n      ))}\n      {form.createFormItem(\"lastname\", {\n        required: true,\n        adaptor: (e: React.ChangeEvent<HTMLInputElement>) => e.target.value,\n        meta: {\n          label: \"Last Name\",\n        },\n      })(({ errorText, meta: { label }, ...props }) => (\n        <InputField label={label} {...props} errorText={errorText || \"\"} />\n      ))}\n      <input className={styles.submit} type=\"submit\" value=\"Submit\" />\n      <section>\n        {log.map((v, i) => (\n          <p key={i}>{v}</p>\n        ))}\n      </section>\n    </form>\n  );\n};\n","import { TextField, Button } from \"@material-ui/core\";\nimport { createMuiTheme, ThemeProvider } from \"@material-ui/core/styles\";\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\nimport React from \"react\";\nimport { useForm } from \"use-form-ts\";\n\nimport styles from \"./MaterialForm.module.css\";\n\nexport const MaterialForm = () => {\n  const [formState, setFormState] = React.useState({\n    firstname: \"\",\n    lastname: \"\",\n  });\n  const [log, setLog] = React.useState<string[]>([]);\n  const prefersDarkMode = useMediaQuery(\"(prefers-color-scheme: dark)\");\n\n  const form = useForm({\n    values: formState,\n    onChange: (value) => setFormState({ ...formState, ...value }),\n  });\n\n  const theme = React.useMemo(\n    () =>\n      createMuiTheme({\n        palette: {\n          type: prefersDarkMode ? \"dark\" : \"light\",\n        },\n      }),\n    [prefersDarkMode]\n  );\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    if (form.validate())\n      setLog(log.concat(`Result: ${JSON.stringify(formState)}`));\n  };\n\n  return (\n    <ThemeProvider theme={theme}>\n      <form onSubmit={handleSubmit} className={styles.form}>\n        {form.createFormItem(\"firstname\", {\n          required: true,\n          adaptor: (e: React.FocusEvent<HTMLInputElement>) => e.target.value,\n          meta: {\n            label: \"First Name\",\n          },\n        })(({ errorText, meta: { label }, ...props }) => (\n          <div>\n            <TextField\n              label={label}\n              variant=\"outlined\"\n              {...props}\n              {...(errorText ? { error: true, helperText: errorText } : {})}\n            />\n          </div>\n        ))}\n        {form.createFormItem(\"lastname\", {\n          required: true,\n          adaptor: (e: React.FocusEvent<HTMLInputElement>) => e.target.value,\n          meta: {\n            label: \"Last Name\",\n          },\n        })(({ errorText, meta: { label }, ...props }) => (\n          <div>\n            <TextField\n              label={label}\n              variant=\"outlined\"\n              {...props}\n              {...(errorText ? { error: true, helperText: errorText } : {})}\n            />\n          </div>\n        ))}\n        <div>\n          <Button variant=\"contained\" type=\"submit\">\n            Submit\n          </Button>\n        </div>\n        <section>\n          {log.map((v, i) => (\n            <p key={i}>{v}</p>\n          ))}\n        </section>\n      </form>\n    </ThemeProvider>\n  );\n};\n","import React from \"react\";\n\nimport styles from \"./Button.module.css\";\n\ntype Props = {\n  onClick: () => void;\n};\nexport const Button: React.FC<Props> = ({ onClick, children }) => (\n  <button className={styles.button} onClick={onClick}>\n    {children}\n  </button>\n);\ntype LinkButtonProps = {\n  link: string;\n  isNewTab?: boolean;\n};\nexport const LinkButton: React.FC<LinkButtonProps> = ({\n  children,\n  link,\n  isNewTab,\n}) => (\n  <a\n    href={link}\n    className={styles.button}\n    rel=\"noopener noreferrer\"\n    target={isNewTab ? \"_blank\" : \"_self\"}\n  >\n    {children}\n  </a>\n);\n","/**\n * Fix typing for Object.keys\n */\nexport function ObjectKeys<T extends {}>(o: T): (keyof T)[] {\n  return Object.keys(o) as any;\n}\n\nexport function checkUnreachable(_x: never) {}\n\nexport function cn(\n  ...args: (string | undefined | null | 0 | false | \"\")[]\n): string {\n  return args.filter(isString).join(\" \");\n}\nfunction isString(a: any): a is string {\n  return typeof a === \"string\";\n}\n","import React from \"react\";\nimport { Prism as SyntaxHighlighter } from \"react-syntax-highlighter\";\nimport { solarizedlight } from \"react-syntax-highlighter/dist/esm/styles/prism\";\n\n\nimport { Button } from \"./Button\";\nimport styles from \"./ExampleFrame.module.css\";\n\nimport { cn } from \"../../utils\";\n\ntype Props = {\n  sourceCode: string;\n  headerText: string;\n};\nexport const ExampleFrame: React.FC<Props> = ({\n  children,\n  sourceCode,\n  headerText,\n}) => {\n  const [isShowSource, setIsShowSource] = React.useState(false);\n  return (\n    <section className={styles.exampleFrame}>\n      <header className={styles.header}>\n        <h4>{headerText}</h4>\n        <Button onClick={() => setIsShowSource(!isShowSource)}>\n          {isShowSource ? \"Hide Source\" : \"Show Source\"}\n        </Button>\n      </header>\n      <section>{children}</section>\n      <section\n        className={cn(styles.code, isShowSource ? styles.show : styles.hidden)}\n      >\n        <SyntaxHighlighter language=\"tsx\" style={solarizedlight}>\n          {sourceCode}\n        </SyntaxHighlighter>\n      </section>\n    </section>\n  );\n};\n","import React from \"react\";\n\nimport styles from \"./Home.module.css\";\n\nimport { DeclarativeForm } from \"../forms/DeclarativeForm\";\nimport { declarativeForm } from \"../forms/DeclarativeForm.txt\";\nimport { ExampleForm } from \"../forms/ExampleForm\";\nimport { exampleForm } from \"../forms/ExampleForm.txt\";\nimport { MaterialForm } from \"../forms/MaterialForm\";\nimport { materialForm } from \"../forms/MaterialForm.txt\";\nimport { ExampleFrame } from \"../shared/ExampleFrame\";\n\nexport const Home: React.FC = () => (\n  <section className={styles.home}>\n    <header className={styles.header}>\n      <h1 className={styles.title}>useForm</h1>\n      <p>Lightweight useForm hook for creating basic forms with TypeScript</p>\n      <p className={styles.terminal}>\n        <pre>\n          yarn add <span className={styles.highlight}>use-form-ts</span>\n        </pre>\n      </p>\n      <p className={styles.terminal}>\n        <pre>\n          npm install --save{\" \"}\n          <span className={styles.highlight}>use-form-ts</span>\n        </pre>\n      </p>\n      <p>\n        Checkout{\" \"}\n        <a\n          href=\"https://github.com/ayroblu/use-form-ts\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          GitHub\n        </a>{\" \"}\n        for more details\n      </p>\n    </header>\n    <section>\n      <h2>useForm hook</h2>\n      <p>\n        The goal was to keep things simple, there are 3 things to worry about\n      </p>\n      <ul>\n        <li>Values</li>\n        <li>How they change</li>\n        <li>Validation</li>\n      </ul>\n    </section>\n    <section>\n      <p>This example showcases a complete common use of useForm</p>\n      <ExampleFrame sourceCode={exampleForm} headerText=\"Example\">\n        <ExampleForm />\n      </ExampleFrame>\n      <p>\n        This example showcases a similar example but by predeclaring your form\n        and using a generator\n      </p>\n      <ExampleFrame sourceCode={declarativeForm} headerText=\"Declarative Form\">\n        <DeclarativeForm />\n      </ExampleFrame>\n      <p>\n        This example showcases using Material UI as your component library\n        instead of JS\n      </p>\n      <ExampleFrame sourceCode={materialForm} headerText=\"Material UI Form\">\n        <MaterialForm />\n      </ExampleFrame>\n    </section>\n    <footer className={styles.footer}>Made with love ❤️</footer>\n  </section>\n);\n","export const exampleForm = `import React from \"react\";\nimport { useForm } from \"use-form-ts\";\n\nimport styles from \"./ExampleForm.module.css\";\nimport { InputField } from \"./InputField\";\n\nexport const ExampleForm = () => {\n  const [formState, setFormState] = React.useState({\n    firstname: \"\",\n    lastname: \"\",\n  });\n  const [log, setLog] = React.useState<string[]>([]);\n\n  const form = useForm({\n    values: formState,\n    onChange: (value) => setFormState({ ...formState, ...value }),\n  });\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    if (form.validate())\n      setLog(log.concat(\\`Result: \\${JSON.stringify(formState)}\\`));\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className={styles.form}>\n      {form.createFormItem(\"firstname\", {\n        required: true,\n        adaptor: (e: React.ChangeEvent<HTMLInputElement>) => e.target.value,\n        meta: {\n          label: \"First Name\",\n        },\n      })(({ errorText, meta: { label }, ...props }) => (\n        <InputField label={label} {...props} errorText={errorText || \"\"} />\n      ))}\n      {form.createFormItem(\"lastname\", {\n        required: true,\n        adaptor: (e: React.ChangeEvent<HTMLInputElement>) => e.target.value,\n        meta: {\n          label: \"Last Name\",\n        },\n      })(({ errorText, meta: { label }, ...props }) => (\n        <InputField label={label} {...props} errorText={errorText || \"\"} />\n      ))}\n      <input className={styles.submit} type=\"submit\" value=\"Submit\" />\n      <section>\n        {log.map((v, i) => (\n          <p key={i}>{v}</p>\n        ))}\n      </section>\n    </form>\n  );\n};\n`","export const declarativeForm = `import React from \"react\";\nimport { CreateFormItem, useForm } from \"use-form-ts\";\n\nimport styles from \"./ExampleForm.module.css\";\nimport { InputField } from \"./InputField\";\n\ntype FormState = { firstname: string; middlename: string; lastname: string };\ntype FormItem<T extends {}> = {\n  name: keyof T;\n  type: \"text\";\n  options: {\n    required: boolean;\n    adaptor: typeof adaptor;\n    meta: { label: string };\n  };\n};\n\nconst initialState: FormState = {\n  firstname: \"\",\n  middlename: \"\",\n  lastname: \"\",\n};\nconst adaptor = (e: React.ChangeEvent<HTMLInputElement>) => e.target.value;\n\nconst declaredForm: FormItem<FormState>[] = [\n  {\n    name: \"firstname\",\n    type: \"text\",\n    options: {\n      required: true,\n      adaptor,\n      meta: {\n        label: \"First Name\",\n      },\n    },\n  },\n  {\n    name: \"middlename\",\n    type: \"text\",\n    options: {\n      required: false,\n      adaptor,\n      meta: {\n        label: \"Middle Name\",\n      },\n    },\n  },\n  {\n    name: \"lastname\",\n    type: \"text\",\n    options: {\n      required: true,\n      adaptor,\n      meta: {\n        label: \"Last Name\",\n      },\n    },\n  },\n];\n\nconst formItemCreatorFn = (form: {\n  createFormItem: CreateFormItem<FormState>;\n  validate: () => boolean;\n}) => ({ name, type, options }: FormItem<FormState>) => {\n  if (type === \"text\")\n    return form.createFormItem(\n      name,\n      options\n    )(({ errorText, meta: { label }, ...props }) => (\n      <InputField label={label} {...props} errorText={errorText || \"\"} />\n    ));\n\n  return null;\n};\n\nexport const DeclarativeForm = () => {\n  const [formState, setFormState] = React.useState<FormState>(initialState);\n  const [log, setLog] = React.useState<string[]>([]);\n\n  const form = useForm({\n    values: formState,\n    onChange: (value) => setFormState({ ...formState, ...value }),\n  });\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    if (form.validate())\n      setLog(log.concat(\\`Result: \\${JSON.stringify(formState)}\\`));\n  };\n  const formItemCreator = formItemCreatorFn(form);\n\n  return (\n    <form onSubmit={handleSubmit} className={styles.form}>\n      {declaredForm.map(formItemCreator)}\n      <input className={styles.submit} type=\"submit\" value=\"Submit\" />\n      <section>\n        {log.map((v, i) => (\n          <p key={i}>{v}</p>\n        ))}\n      </section>\n    </form>\n  );\n};\n`","export const materialForm = `import { TextField, Button } from \"@material-ui/core\";\nimport React from \"react\";\nimport { useForm } from \"use-form-ts\";\n\nexport const MaterialForm = () => {\n  const [formState, setFormState] = React.useState({\n    firstname: \"\",\n    lastname: \"\",\n  });\n  const [log, setLog] = React.useState<string[]>([]);\n\n  const form = useForm({\n    values: formState,\n    onChange: (value) => setFormState({ ...formState, ...value }),\n  });\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    if (form.validate())\n      setLog(log.concat(\\`Result: \\${JSON.stringify(formState)}\\`));\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      {form.createFormItem(\"firstname\", {\n        required: true,\n        adaptor: (e: React.FocusEvent<HTMLInputElement>) => e.target.value,\n        meta: {\n          label: \"First Name\",\n        },\n      })(({ errorText, meta: { label }, ...props }) => (\n        <TextField\n          label={label}\n          variant=\"outlined\"\n          {...props}\n          {...(errorText ? { error: true, helperText: errorText } : {})}\n        />\n      ))}\n      {form.createFormItem(\"lastname\", {\n        required: true,\n        adaptor: (e: React.FocusEvent<HTMLInputElement>) => e.target.value,\n        meta: {\n          label: \"Last Name\",\n        },\n      })(({ errorText, meta: { label }, ...props }) => (\n        <TextField\n          label={label}\n          variant=\"outlined\"\n          {...props}\n          {...(errorText ? { error: true, helperText: errorText } : {})}\n        />\n      ))}\n      <Button type=\"submit\">Submit</Button>\n      <section>\n        {log.map((v, i) => (\n          <p key={i}>{v}</p>\n        ))}\n      </section>\n    </form>\n  );\n};\n`","import React from \"react\";\n\nimport \"./App.css\";\nimport { Home } from \"./home/Home\";\n\nexport function App() {\n  return (\n    <div className=\"App\">\n      <Home />\n    </div>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport { App } from \"./components/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"InputField_input__6oOEB\",\"inputLabel\":\"InputField_inputLabel__kAV-J\",\"error\":\"InputField_error__1rwFf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__3uWv_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"MaterialForm_form__bho4F\"};"],"sourceRoot":""}